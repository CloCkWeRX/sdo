// $Id$
// vim:ft=javascript

ARG_ENABLE("sdo", "enable sdo support", "no");

if (PHP_SDO != "no") {
	if (CHECK_LIB('iconv.lib', 'sdo') && CHECK_LIB('zlib.lib', 'sdo') && CHECK_LIB('libxml2.lib', 'sdo') &&
		CHECK_HEADER_ADD_INCLUDE('\\commonj\\sdo\\SDOSPI.h', 'CFLAGS_SDO', configure_module_dirname)) {
		
		/* first build the sdo core extension ... */
		EXTENSION('sdo', 
			'sdo.cpp SDO_DAS_ChangeSummary.cpp  SDO_DAS_DataFactory.cpp  SDO_DAS_Setting.cpp  SDO_DataObject.cpp  SDO_List.cpp  SDO_Model_Type.cpp SDO_Model_Property.cpp SDO_Model_ReflectionDataObject.cpp SDO_Sequence.cpp sdo_utils.cpp SDO_Exception.cpp SDO_CPPException.cpp',
			'yes',
			'/GX /D SDO_EXPORTS');
	
                /* ... add local copy of the SDO C++ library ... */        
                ADD_SOURCES(configure_module_dirname + '\\commonj\\sdo', 
                        'ChangedDataObjectListImpl.cpp ChangeSummary.cpp ChangeSummaryBuilder.cpp ChangeSummaryImpl.cpp CopyHelper.cpp DASProperty.cpp DASType.cpp DASValue.cpp DASValues.cpp DataFactory.cpp DataFactoryImpl.cpp DataGraph.cpp DataGraphImpl.cpp DataObject.cpp DataObjectImpl.cpp DataObjectInstance.cpp DataObjectList.cpp DataObjectListImpl.cpp DefaultLogWriter.cpp EqualityHelper.cpp GroupDefinition.cpp GroupEvent.cpp HelperProvider.cpp Logger.cpp LogWriter.cpp ParserErrorSetter.cpp Property.cpp PropertyDefinition.cpp PropertyDefinitionImpl.cpp PropertyImpl.cpp PropertyList.cpp PropertySetting.cpp RefCountingObject.cpp RefCountingPointer.cpp SAX2Attribute.cpp SAX2Attributes.cpp SAX2Namespaces.cpp SAX2Parser.cpp SchemaInfo.cpp SDOCheck.cpp SDODate.cpp SDORuntime.cpp SDORuntimeException.cpp SDOSax2Parser.cpp SDOSchemaSAX2Parser.cpp SDOString.cpp SDOUtils.cpp SDOXMLBufferWriter.cpp SDOXMLFileWriter.cpp SDOXMLStreamWriter.cpp SDOXMLString.cpp SDOXMLWriter.cpp SDOXSDBufferWriter.cpp SDOXSDFileWriter.cpp SDOXSDStreamWriter.cpp SDOXSDWriter.cpp Sequence.cpp SequenceImpl.cpp Setting.cpp SettingList.cpp Type.cpp TypeDefinition.cpp TypeDefinitionImpl.cpp TypeDefinitions.cpp TypeDefinitionsImpl.cpp TypeImpl.cpp TypeList.cpp XMLDocument.cpp XMLDocumentImpl.cpp XMLHelper.cpp XMLHelperImpl.cpp XMLQName.cpp XpathHelper.cpp XSDHelper.cpp XSDHelperImpl.cpp XSDPropertyInfo.cpp XSDTypeInfo.cpp', 
                        'sdo');  
	
		/* ... then the sdo xml das extension */
		if (PHP_SDO_SHARED) {
		    PHP_SDO_DAS_XML_SHARED = PHP_SDO_SHARED;
		    ADD_FLAG('CFLAGS_SDO_DAS_XML', '/D COMPILE_DL_SDO');
		} else {
		    PHP_SDO_DAS_XML_SHARED = 'no';
		}			

	
		EXTENSION('sdo_das_xml', 
			'das_xml.cpp xmldas_utils.cpp SDO_DAS_XML.cpp SDO_DAS_XML_Document.cpp',
			'yes',
			'/GX /D SDO_DAS_XML_EXPORTS');
		
		ADD_EXTENSION_DEP('sdo_das_xml', 'sdo');
	} else {
		WARNING("sdo not enabled; libraries and headers not found");
	}

}