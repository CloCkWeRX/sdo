<?php
/*
+-----------------------------------------------------------------------------+
| (c) Copyright IBM Corporation 2006, 2007.                                   |
| All Rights Reserved.                                                        |
+-----------------------------------------------------------------------------+
| Licensed under the Apache License, Version 2.0 (the "License"); you may not |
| use this file except in compliance with the License. You may obtain a copy  |
| of the License at -                                                         |
|                                                                             |
|                   http://www.apache.org/licenses/LICENSE-2.0                |
|                                                                             |
| Unless required by applicable law or agreed to in writing, software         |
| distributed under the License is distributed on an "AS IS" BASIS, WITHOUT   |
| WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.            |
| See the License for the specific language governing  permissions and        |
| limitations under the License.                                              |
+-----------------------------------------------------------------------------+
| Author: Wangkai Zai                                                         |
|                                                                             |
+-----------------------------------------------------------------------------+
*/
require "SCA/Bindings/message/Wrapper.php";
require 'SCA/Bindings/message/ServiceDescriptionGenerator.php';
require 'SCA/Bindings/message/SAM_Client.php';
require "SCA/Bindings/message/Mapper.php";
require "SCA/Bindings/soap/ServiceDescriptionGenerator.php";

if ( ! class_exists('SCA_Bindings_message_ServiceRequestHandler', false) ) {

    class SCA_Bindings_message_ServiceRequestHandler
    {
        public function handle($calling_component_filename, $service_description)
        {
            SCA::$logger->log("Entering");
            SCA::$logger->log("calling from $calling_component_filename");

            //var_dump($service_description);
            // Guess a queue name
            if(!isset($service_description->binding_config['destination'])){
                $service_description->binding_config['destination'] 
                    = 'queue://' . $service_description->class_name;
                SCA::$logger->log("Target queue not specified, SCA will use class name as default queue name");
            }

            //Generate a Message Provider Description file.
            $mpd_filename = str_replace('.php', '.msd', $calling_component_filename);
            if (!file_exists($mpd_filename)) {
                file_put_contents($mpd_filename,
                SCA_Bindings_message_ServiceDescriptionGenerator::generateMSD($service_description));
            }

            /*do we use WSDL schema?*/
            if(isset($service_description->binding_config['wsdl']) &&
                     $service_description->binding_config['wsdl'] == 'disabled')
            {
                /*No!*/
                $mapper = null;
            }else{
                /*Yes, then we'll also need a wsdl file, 
                this is generated by the ServiceDescriptionGenerator class of the soap binding*/
                $wsdl_filename = str_replace('.php', '.wsdl', $calling_component_filename);
                if (!file_exists($wsdl_filename)) {
                    file_put_contents($wsdl_filename,
                    SCA_Bindings_soap_ServiceDescriptionGenerator::generateDocumentLiteralWrappedWsdl($service_description));
                }
    
                $mapper = new SCA_Bindings_message_Mapper();
                try {
                    SCA::$logger->log("Wsdl Type = {$wsdl_filename}");
                    $mapper->setWSDLTypes($wsdl_filename);
                } catch( SCA_RuntimeException $wsdlerror ) {
                    echo $wsdlerror->exceptionString() . "\n" ;
                }
            }

            $class_name = SCA_Helper::guessClassName($calling_component_filename);

            //create a wapper
            $service_wrapper = new SCA_Bindings_message_Wrapper($class_name, $service_description,$mapper);

            // create the message listener
            
            $listener = new SCA_Bindings_message_SAMClient($service_wrapper);
            $msd_config = SCA_Bindings_message_ServiceDescriptionGenerator::parseBindingConfig($service_description->binding_config);
            $listener->config($msd_config);
            $listener->start();
            
            echo ">> Test END <<";
            SCA::$logger->log("exiting");
            return ;
        }
    }
}

?>