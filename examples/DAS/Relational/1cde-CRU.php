<?php
/* 
+----------------------------------------------------------------------+
| (c) Copyright IBM Corporation 2005.                                  |
| All Rights Reserved.                                                 |
+----------------------------------------------------------------------+
|                                                                      |
| Licensed under the Apache License, Version 2.0 (the "License"); you  |
| may not use this file except in compliance with the License. You may |
| obtain a copy of the License at                                      |
| http://www.apache.org/licenses/LICENSE-2.0                           |
|                                                                      |
| Unless required by applicable law or agreed to in writing, software  |
| distributed under the License is distributed on an "AS IS" BASIS,    |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or      |
| implied. See the License for the specific language governing         |
| permissions and limitations under the License.                       |
+----------------------------------------------------------------------+
| Author: Matthew Peters                                               |
+----------------------------------------------------------------------+
$Id$
*/

require_once 'SDO/DAS/Relational.php';
require_once 'company_metadata.inc.php';

/*************************************************************************************
 * Use SDO to perform create, retrieve and update operations on an entire company.
 * The SDO will contain company, department, and employee objects in one graph.
 * 
 * See companydb_mysql.sql and companydb_db2.sql for examples of defining the database 
 *************************************************************************************/

/*************************************************************************************
 * Empty out the three tables
 *************************************************************************************/
$dbh = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);
$count = $dbh->exec('DELETE FROM company');
$count = $dbh->exec('DELETE FROM department');
$count = $dbh->exec('DELETE FROM employee');

/*************************************************************************************
 * Get a Data Access Service
 *************************************************************************************/
try {
	$das = new SDO_DAS_Relational ($database_metadata,'company',$SDO_reference_metadata);
} catch (SDO_DAS_Relational_Exception $e) {
	echo "SDO_DAS_Relational_Exception raised when trying to create the DAS.";
	echo "Probably something wrong with the metadata.";
	echo "\n".$e->getMessage();
	exit();
}

/*************************************************************************************
 * Create the root data object then a tiny but complete company.
 * The company name is Acme.
 * There are two departments, Shoe and IT.
 * There are two employees, Sue and Billy.
 * The employee of the month is Sue.
 *************************************************************************************/
$root 			= $das  -> createRootDataObject();
$acme 			= $root -> createDataObject('company');
$acme -> name 	= "Acme";
$shoe 			= $acme -> createDataObject('department');
$shoe -> name 	= 'Shoe';
$shoe -> location = 'A-block';
$it 			= $acme -> createDataObject('department');
$it -> name 	= 'IT';
$it -> location = 'G-block';
$sue 			= $shoe -> createDataObject('employee');
$sue -> name 	= 'Sue';
$billy 			= $it   -> createDataObject('employee');
$billy -> name 	= 'Billy';
$acme -> employee_of_the_month = $sue;
/*************************************************************************************
 * When the datagraph is written to the database, the autogenerated primary keys
 * are found from the database.
 *************************************************************************************/
writeBackCDE($das,$acme);

echo "Wrote back company with name Acme, department Shoe, and employee Sue\n";

/*************************************************************************************
 * Find the company again and change various aspects.
 * Then write it back again.
 *************************************************************************************/
$acme2 = findCompanyCDE($das,'Acme');
echo "Looked for Acme and found company with name = $acme2->name and id $acme2->id\n";
echo "First department had name = " . $acme2->department[0]->name . "\n";
echo "First employee had name = " . $acme2->department[0]->employee[0]->name . "\n";
$acme2 -> name 		= 'MegaCorp';
$first_dept			= $acme2->department[0];
$first_emp 			= $first_dept -> employee[0];
$first_dept -> name	= 'Footwear';
$first_emp  -> name	= 'Susan';
//$acme2->employee_of_the_month = $first_emp;
writeBackCDE($das,$acme2);
echo "Wrote back company with all the names changed (Megacorp/Footwear/Susan)\n";

/*************************************************************************************
 * Find it again under its new name.
 *************************************************************************************/
$megacorp 	= findCompanyCDE($das,'Megacorp');
$first_dept = $megacorp->department[0];
$first_emp	= $first_dept->employee[0];
echo "\nLooked for MegaCorp and found company with id " . $megacorp->id . "\n";
echo "First department had name = " . $first_dept->name . "\n";
echo "First employee had name = " . $first_emp->name . "\n";

/**
 * FindCompanyCDE - find a whole company/department/employee structure given the company name
 * 
 * Since we want to put a variable into the SQL, use the prepared statement interface
 * and a placeholder to ensure invalid SQL cannot be injected, regardless of what is 
 * passed in $name. 
 */
function findCompanyCDE($das,$name) 
{
	$dbh = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);
	try {
		$pdo_stmt = $dbh->prepare('select c.id, c.name, d.id, d.name, e.id, e.name from' .
				' company c, department d, employee e where e.dept_id = d.id and d.co_id = c.id ' .
				'and c.name=?');
		$root = $das->executePreparedQuery($dbh,$pdo_stmt, array($name),
				array('company.id','company.name','department.id','department.name','employee.id','employee.name'));
	} catch (SDO_DAS_Relational_Exception $e) {
		echo "SDO_DAS_Relational_Exception raised when trying to retrieve data from the database.";
		echo "Probably something wrong with the SQL query.";
		echo "\n".$e->getMessage();
		exit();
	}
	return $root['company'][0];
}

function writeBackCDE($das, $data_object) 
{
	$dbh = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);
	try {
		$das -> applyChanges($dbh, $data_object);
	} catch (SDO_DAS_Relational_Exception $e) {
		echo "\nSDO_DAS_Relational_Exception raised when trying to apply changes.";
		echo "\nProbably something wrong with the data graph.";
		echo "\n".$e->getMessage();
		exit();
	}
}



?>
