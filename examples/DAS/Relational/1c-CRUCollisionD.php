<?php
/*
+----------------------------------------------------------------------+
| (c) Copyright IBM Corporation 2005.                                  |
| All Rights Reserved.                                                 |
+----------------------------------------------------------------------+
|                                                                      |
| Licensed under the Apache License, Version 2.0 (the "License"); you  |
| may not use this file except in compliance with the License. You may |
| obtain a copy of the License at                                      |
| http://www.apache.org/licenses/LICENSE-2.0                           |
|                                                                      |
| Unless required by applicable law or agreed to in writing, software  |
| distributed under the License is distributed on an "AS IS" BASIS,    |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or      |
| implied. See the License for the specific language governing         |
| permissions and limitations under the License.                       |
+----------------------------------------------------------------------+
| Author: Simon Laws                                                   |
+----------------------------------------------------------------------+
$Id$
*/

echo "executing scenario one-company-create/retrieve/update/Collision/delete\n";

require_once 'SDO/DAS/Relational.php';
require_once 'company_metadata.inc.php';


/*************************************************************************************
* Use SDO to perform create, retrieve, update, and delete operations on a row of the company table.
* Just prior to the update the row is changed on the database to force a collision condition
*
* See companydb_mysql.sql and companydb_db2.sql for examples of defining the database
*
* to keep this example shorter, no try/catch blocks
* to make it quite clear that we work disconnected, get a fresh DAS and PDO handle each time
*************************************************************************************/

/*************************************************************************************
 * Empty out the company table
 *************************************************************************************/
$dbh = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);
$count = $dbh->exec('DELETE FROM company;');
echo "Emptied out the company table with DELETE FROM company\n";


/*************************************************************************************
* Create the root data object then a single company object underneath it.
* Set the company name to 'Acme'.
*************************************************************************************/
$das = new SDO_DAS_Relational ($database_metadata,'company',$SDO_reference_metadata);
$dbh = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);

$root 		= $das  -> createRootDataObject();
$company 	= $root -> createDataObject('company');
$company -> name = "Acme";
$company -> employee_of_the_month = null;

$das -> applyChanges($dbh, $root);
echo "Created a company with name Acme and wrote it to the database\n";

/*************************************************************************************
 * Find it again (with its autogenerated id this time).
 *************************************************************************************/
$das = new SDO_DAS_Relational ($database_metadata,'company',$SDO_reference_metadata);
$dbh = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);

$name = 'Acme';
$pdo_stmt = $dbh->prepare('select name, id, employee_of_the_month from company where name=?');
$root = $das->executePreparedQuery($dbh, $pdo_stmt ,array($name), array('company.name', 'company.id','company.employee_of_the_month'));
$company2 = $root['company'][0];
echo "Looked for Acme and found company with name = " . $company2->name . " and id " . $company2->id . "\n";
assert($company2->name == 'Acme');
assert($company2->employee_of_the_month === null);

/*************************************************************************************
 * Force a change in the databse behind the back of SDO
 *************************************************************************************/
$dbh2 = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);
$count = $dbh2->exec("update company set name='ForcedNameChange' where name='Acme';");
echo "Update the company name behind the scenes\n";
echo "Number of rows updated = " . $count . "\n";

/*************************************************************************************
 * Update the SDO version of the record and and write it back again.
 * The collision detection test should fire here
 *************************************************************************************/
try {
  $company2->name = 'MegaCorp';
  $das -> applyChanges($dbh, $root);
  echo "This test should have thrown an exception indicating a collision was detected but nothing happened\n";
} catch (SDO_Exception $e) {
    echo "Expected notification of collision detection got... \n\n";
    print "getMessage(): ".$e->getMessage()."\n\n";
}


/*************************************************************************************
* Find it again under its old name, and delete it.
* Just for a change, re-use the PDO database handle and prepared statement.
*************************************************************************************/

$name = 'ForcedNameChange';
$root = $das->executePreparedQuery($dbh, $pdo_stmt ,array($name), array('company.name', 'company.id','company.employee_of_the_month'));
$company3 = $root['company'][0];
echo "Looked for ForcedNameChange and found company with name = " . $company3->name . " and id " . $company3->id . "\n";
assert($company3->name == 'ForcedNameChange');
unset($root['company'][0]); // do not make the mistake of doing unset($company3) - this will just destroy the $company3 variable
$das -> applyChanges($dbh, $root);
echo "Deleted the company and wrote the changes back to the database\n";

/*************************************************************************************
* Check the row is really gone
*************************************************************************************/
$dbh = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);

foreach ($dbh->query('select * from company') as $row) {
  assert(false); // There had better be no such rows.
}

echo "Checked that the table was truly empty with SELECT * FROM company. Nothing was found so the delete was successful.\n";

?>
