<?php
/* 
+----------------------------------------------------------------------+
| (c) Copyright IBM Corporation 2005.                                  |
| All Rights Reserved.                                                 |
+----------------------------------------------------------------------+
|                                                                      |
| Licensed under the Apache License, Version 2.0 (the "License"); you  |
| may not use this file except in compliance with the License. You may |
| obtain a copy of the License at                                      |
| http://www.apache.org/licenses/LICENSE-2.0                           |
|                                                                      |
| Unless required by applicable law or agreed to in writing, software  |
| distributed under the License is distributed on an "AS IS" BASIS,    |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or      |
| implied. See the License for the specific language governing         |
| permissions and limitations under the License.                       |
+----------------------------------------------------------------------+
| Author: Matthew Peters                                               |
+----------------------------------------------------------------------+

*/

require_once 'SDO/DAS/Relational.php';
require_once 'company_metadata.inc.php'; // will override most of this this time

/*************************************************************************************
* Use SDO to perform create, retrieve, update, and delete operations on a row of the employee table.
*
* create table employee (
*   id integer auto_increment,
*   name char(20),
*   SN char(4),
*   manager tinyint(1),
*   dept_id integer,
*   primary key(id)
* );
* 
* This example works against one table with no foreign keys or containment relationships and shows how in 
* this case the arguments to the SDO_DAS_Relational constructor and executeQuery can be simplified. 
* 1. Since there are no FKs and no containment references there is no need to specify the third argument 
*    to the SDO_DAS_Relational constructor.
* 2. As there is only one table the application root type - the first type to appear under the root object - 
*    is assumed to be the name of the only table, hence there is no need for the second argument to the constructor either
* 3. Finally, with only one table in the model there can be no ambiguity in the column/property names, so there is no 
*    need for a column specifier to executeQuery(). Instead executeQuery() will use the column name information that it can obtain
*    from PDO to know which column is which in the result set that comes back from the database.
*
* As with the other examples:
*    to keep this example shorter, no try/catch blocks
*    to make it quite clear that we work disconnected, get a fresh DAS and PDO handle each time
*************************************************************************************/

$employee_table = array (
	'name' => 'employee',
	'columns' => array('id', 'name', 'SN', 'manager', 'dept_id'),
	'PK' => 'id');

$database_metadata = array($employee_table);


/*************************************************************************************
* Empty out the company table
*************************************************************************************/
$dbh = new PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);
$pdo_stmt = $dbh->prepare('DELETE FROM EMPLOYEE;');
$rows_affected = $pdo_stmt->execute();
echo "Emptied out the employee table with DELETE FROM EMPLOYEE\n";


/*************************************************************************************
* Create the root data object then a single company object underneath it.
* Set the company name to 'Acme'.
*************************************************************************************/
$das = new SDO_DAS_Relational ($database_metadata);
$dbh = new PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);

$root 		= $das  -> createRootDataObject();
$employee 	= $root -> createDataObject('employee');
$employee -> name = "Sue";
$employee -> SN = "001";
$das -> applyChanges($dbh, $root);
echo "Created an employee with name Sue and wrote it to the database\n";

/*************************************************************************************
* Find it again (with its autogenerated id this time).
* Then update it and write it back again.
*************************************************************************************/
$das = new SDO_DAS_Relational ($database_metadata);
$dbh = new PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);

$name = 'Sue';
$root = $das->executeQuery($dbh,'select id, name, SN from employee where name="' . $name . '";');
$sue = $root['employee'][0];
echo "Looked for Sue and found employee with name = " . $sue->name . " and SN " . $sue->SN . "\n";
$sue->name = 'Susan';
$sue->SN = 2;
$das -> applyChanges($dbh, $root);
echo "Wrote back employee with name changed to Susan\n";

/*************************************************************************************
* Find it again under its new name, and delete it.
*************************************************************************************/
$das = new SDO_DAS_Relational ($database_metadata);
$dbh = new PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);

$name = 'Susan';
$root = $das->executeQuery($dbh,'select id, name, SN from employee where name="' . $name . '";');
$susan = $root['employee'][0];
echo "Looked for Susan and found employee with name = " . $susan->name . " and SN " . $susan->SN . "\n";
unset($root['employee'][0]); // do not make the mistake of doing unset($company3) - this will just destroy the $company3 variable
$das -> applyChanges($dbh, $root);
echo "Deleted the employee and wrote the changes back to the database\n";

/*************************************************************************************
* Check the row is really gone
*************************************************************************************/
$dbh = new PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);

foreach($dbh->query('SELECT * FROM EMPLOYEE') as $row) {
	assert(false); 	// better not get to here!
}
echo "Checked that the table was truly empty with SELECT * FROM EMPLOYEE. Nothing was found so the delete was successful.\n";

?>
